# Site-specific configuration for refactor.engineer

# Use Docker's internal DNS resolver
resolver 127.0.0.11 valid=30s;

# Define upstream servers with variables for dynamic resolution
upstream backend {
    server rust-app:4000;
}

upstream frontend {
    server nextjs-app:3000;
}

# Redirect all HTTP traffic to HTTPS
server {
    listen 80;
    server_name refactor.engineer www.refactor.engineer;
    
    # Allow Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect everything else to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Main HTTPS server block
server {
    listen 443 ssl;
    http2 on;
    server_name refactor.engineer www.refactor.engineer;

    # SSL Certificate configuration
    ssl_certificate /etc/letsencrypt/live/refactor.engineer/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/refactor.engineer/privkey.pem;
    
    # Additional SSL security
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # API routes - proxy to backend container
    # This handles all requests that start with /api/
    location /api/ {
        # Remove /api prefix and proxy to backend
        rewrite ^/api(.*)$ $1 break;
        
        # Proxy to the backend container using upstream
        proxy_pass http://backend;
        
        # Forward important headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Handle timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Handle CORS preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://refactor.engineer' always;
            add_header 'Access-Control-Allow-Origin' 'https://www.refactor.engineer' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,x-version' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain; charset=utf-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }
        
        # Add CORS headers for actual requests
        add_header 'Access-Control-Allow-Origin' 'https://refactor.engineer' always;
        add_header 'Access-Control-Allow-Origin' 'https://www.refactor.engineer' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
    }

    # Health check endpoint (optional, for monitoring)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Frontend routing - everything else goes to Next.js
    location / {
        # Proxy to the frontend container using upstream
        proxy_pass http://frontend;
        
        # Forward important headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Handle WebSocket connections (useful for Next.js development)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Handle timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings for better performance
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
    }

    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|git)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}
version: '3.8'
services:
  # Local PostgreSQL container (used for local development when needed)
  db:
    image: postgres:latest  # Use latest PostgreSQL version
    env_file:
      - ${ENV_FILE:-.env.local}  # Override by setting ENV_FILE; defaults to .env.local
    ports:
      - "${DB_PORT:-5432}:5432"  # Map host port from .env variable to container's PostgreSQL port
    volumes:
      - db_data:/var/lib/postgresql/data  # Persist PostgreSQL data
      - ./migration/src/setup.sql:/docker-entrypoint-initdb.d/0-setup.sql  # Initialize database with setup.sql
      - ./migration/src/refactor_platform_rs.sql:/docker-entrypoint-initdb.d/1-refactor_platform_rs.sql  # Initialize with refactor_platform_rs.sql
      - ./migration/src/setup_default_user.sql:/docker-entrypoint-initdb.d/2-setup_default_user.sql  # Initialize with setup_default_user.sql
    networks:
      - backend_network  # Connect to backend_network

  # Rust application that connects to either local or remote PostgreSQL
  backend:
    build:
      context: .  # Build context is current directory
      dockerfile: Dockerfile  # Use specified Dockerfile
      target: runtime  # Use runtime target
    platform: ${PLATFORM}  # Specify the platform
    container_name: ${CONTAINER_NAME}  # Name the container, default is "rust-app"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}  # Set PostgreSQL user from environment variable
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Set PostgreSQL password from environment variable
      POSTGRES_DB: ${POSTGRES_DB}  # Set PostgreSQL database name from environment variable
      POSTGRES_SCHEMA: ${POSTGRES_SCHEMA}  # Set PostgreSQL schema from environment variable
      POSTGRES_HOST: postgres  # Set PostgreSQL host to "postgres" service
      POSTGRES_PORT: ${POSTGRES_PORT}  # Set PostgreSQL port from environment variable
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}  # Configure database URL
      BACKEND_PORT: ${BACKEND_PORT}  # Set service port from environment variable
      BACKEND_INTERFACE: ${BACKEND_INTERFACE}  # Set service interface from environment variable
      BACKEND_ALLOWED_ORIGINS: ${BACKEND_ALLOWED_ORIGINS}
      BACKEND_LOG_FILTER_LEVEL: ${BACKEND_LOG_FILTER_LEVEL}
      TIPTAP_URL: ${TIPTAP_URL}
      TIPTAP_AUTH_KEY: ${TIPTAP_AUTH_KEY}
      TIPTAP_JWT_SIGNING_KEY: ${TIPTAP_JWT_SIGNING_KEY}
    env_file:
      - ${ENV_FILE:-.env.local}  # Same override capability
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"  # Map host port to container's service port
    depends_on:
      - db  # Ensure db service starts before backend
    networks:
      - backend_network  # Connect to backend_network
    command: ["/bin/bash", "-c", "/usr/local/bin/refactor_platform_rs -l \\\"$BACKEND_LOG_FILTER_LEVEL\\\" -i \\\"$BACKEND_INTERFACE\\\" -p \\\"$BACKEND_PORT\\\" -d \\\"$DATABASE_URL\\\" --allowed-origins=\\\"$BACKEND_ALLOWED_ORIGINS\\\""]  # Wait for Postgres and run the app
  
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ${ENV_FILE:-.env.local}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"  # Map a different host port to distinguish frontend
    depends_on:
      - backend
    # Override command to run the frontend binary instead of the backend binary
    command: ["/bin/bash", "-c", "/usr/local/bin/refactor_platform_rs -l \\\"$BACKEND_LOG_FILTER_LEVEL\\\" -i \\\"$BACKEND_INTERFACE\\\" -p \\\"$BACKEND_PORT\\\" -d \\\"$DATABASE_URL\\\" --allowed-origins=\\\"$BACKEND_ALLOWED_ORIGINS\\\""]

networks:
  backend_network:
    driver: bridge  # Use bridge network driver

volumes:
  db_data:  # Define db_data volume

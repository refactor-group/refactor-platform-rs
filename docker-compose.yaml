######################################################
# Docker compose base file for production environment
######################################################

services:
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx-reverse-proxy  # Match the name from your error message
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount your custom nginx configuration
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      # Mount your letsencrypt SSL certs
      - /etc/letsencrypt/live/refactor.engineer/:/etc/letsencrypt/live/refactor.engineer/:ro
      - /etc/letsencrypt/archive/refactor.engineer/:/etc/letsencrypt/archive/refactor.engineer/:ro
      - ${SSL_DHPARAMS_PATH}:/etc/letsencrypt/ssl-dhparams.pem:ro
      # Optional: nginx logs for debugging
      - ./nginx/logs:/var/log/nginx
    depends_on:
      rust-app:
        condition: service_started
      nextjs-app:
        condition: service_started
    networks:
      - backend_network
    restart: unless-stopped

  migrator:                                 # db migration service
    image: ${BACKEND_IMAGE_NAME}            # reuse backend image
    build:
      context: ${BACKEND_BUILD_CONTEXT}
    container_name: db-migrator
    platform: ${PLATFORM}
    environment:
      ROLE: migrator                        # entrypoint knows to migrate
      RUST_ENV: ${RUST_ENV}                 # development, staging, production
      POSTGRES_SSL_ROOT_CERT: ${POSTGRES_SSL_ROOT_CERT}
      DATABASE_SCHEMA: ${POSTGRES_SCHEMA:-public}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?${POSTGRES_OPTIONS}
      PLATFORM: ${PLATFORM}
      BACKEND_IMAGE_NAME: ${BACKEND_IMAGE_NAME}
    restart: "no"                           # run once, then exit
    command: []                             # keep original ENTRYPOINT
    volumes:
      # Read-only bind mount of our production DB CA certificate
      - ${POSTGRES_SSL_ROOT_CERT}:/app/root.crt:ro
    networks:
      - backend_network

  rust-app:
    image: ${BACKEND_IMAGE_NAME}
    build:
      context: ${BACKEND_BUILD_CONTEXT}
    platform: ${PLATFORM}
    container_name: rust-app  # Explicitly set the name nginx expects
    environment:
      ROLE: app
      RUST_ENV: ${RUST_ENV}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SCHEMA: ${POSTGRES_SCHEMA:-public}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_SSL_ROOT_CERT: ${POSTGRES_SSL_ROOT_CERT}
      POSTGRES_OPTIONS: ${POSTGRES_OPTIONS}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?${POSTGRES_OPTIONS}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_IMAGE_NAME: ${BACKEND_IMAGE_NAME}
      BACKEND_INTERFACE: ${BACKEND_INTERFACE}
      BACKEND_API_VERSION: ${BACKEND_API_VERSION}
      BACKEND_ALLOWED_ORIGINS: ${BACKEND_ALLOWED_ORIGINS}
      BACKEND_LOG_FILTER_LEVEL: ${BACKEND_LOG_FILTER_LEVEL}
      TIPTAP_URL: ${TIPTAP_URL}
      TIPTAP_AUTH_KEY: ${TIPTAP_AUTH_KEY}
      TIPTAP_JWT_SIGNING_KEY: ${TIPTAP_JWT_SIGNING_KEY}
      PLATFORM: ${PLATFORM}
    depends_on:
      - migrator
    volumes:
      # Read-only bind mount of our production DB CA certificate
      - ${POSTGRES_SSL_ROOT_CERT}:/app/root.crt:ro
    networks:
      - backend_network

  nextjs-app:
    image: ${FRONTEND_IMAGE_NAME}
    build:
      context: ${FRONTEND_BUILD_CONTEXT}
    container_name: nextjs-app
    environment:
      # Next.js server configuration
      HOSTNAME: ${FRONTEND_SERVICE_INTERFACE}
      PORT: ${FRONTEND_SERVICE_PORT}
      # Runtime environment variables for the application
      NEXT_PUBLIC_BACKEND_SERVICE_PROTOCOL: ${BACKEND_SERVICE_PROTOCOL}
      NEXT_PUBLIC_BACKEND_SERVICE_HOST: ${BACKEND_SERVICE_HOST}
      NEXT_PUBLIC_BACKEND_SERVICE_PORT: ${BACKEND_SERVICE_PORT:-443}
      NEXT_PUBLIC_BACKEND_SERVICE_API_PATH: ${BACKEND_SERVICE_API_PATH:-api}
      NEXT_PUBLIC_BACKEND_API_VERSION: ${BACKEND_API_VERSION:-1.0.0-beta1}
      NEXT_PUBLIC_TIPTAP_APP_ID: ${TIPTAP_APP_ID}
      FRONTEND_SERVICE_INTERFACE: ${FRONTEND_SERVICE_INTERFACE}
      FRONTEND_SERVICE_PORT: ${FRONTEND_SERVICE_PORT:-3000}
      FRONTEND_IMAGE_NAME: ${FRONTEND_IMAGE_NAME}
      FRONTEND_CONTAINER_NAME: ${FRONTEND_CONTAINER_NAME}
    depends_on:
      - rust-app
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge
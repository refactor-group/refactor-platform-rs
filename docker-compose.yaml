services:
  postgres:
    image: postgres:17                      # official Postgres 17 image
    container_name: postgres                # fixed name for easier links
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    restart: unless-stopped                 # auto-restart unless stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data  # persist data
    networks:
      - backend_network
    healthcheck:                            # wait until DB is ready
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrator:                                 # db migration service
    image: ${BACKEND_IMAGE_NAME}            # reuse backend image
    build:
      # Set a path to build from source locally, or
      # set to empty string or not set and set a container registry
      # URI in BACKEND_IMAGE_NAME to pull a prebuilt image
      context: ${BACKEND_BUILD_CONTEXT}
    container_name: db-migrator
    platform: ${PLATFORM}
    environment:
      ROLE: migrator                        # entrypoint knows to migrate
      RUST_ENV: ${RUST_ENV}                 # development, staging, production
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      PLATFORM: ${PLATFORM}
      BACKEND_IMAGE_NAME: ${BACKEND_IMAGE_NAME}
    depends_on:
      postgres:
        condition: service_healthy          # start after DB is healthy
    restart: "no"                           # run once, then exit
    command: []                             # keep original ENTRYPOINT
    networks:
      - backend_network

  rust-app:
    image: ${BACKEND_IMAGE_NAME}
    build:
      # Set a path to build from source locally, or
      # set to empty string or not set and set a container registry
      # URI in BACKEND_IMAGE_NAME to pull a prebuilt image
      context: ${BACKEND_BUILD_CONTEXT}
    platform: ${PLATFORM}
    container_name: ${BACKEND_CONTAINER_NAME}
    environment:
      ROLE: app
      RUST_ENV: ${RUST_ENV}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SCHEMA: ${POSTGRES_SCHEMA}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_IMAGE_NAME: ${BACKEND_IMAGE_NAME}
      BACKEND_INTERFACE: ${BACKEND_INTERFACE}
      BACKEND_ALLOWED_ORIGINS: ${BACKEND_ALLOWED_ORIGINS}
      BACKEND_LOG_FILTER_LEVEL: ${BACKEND_LOG_FILTER_LEVEL}
      TIPTAP_URL: ${TIPTAP_URL}
      TIPTAP_AUTH_KEY: ${TIPTAP_AUTH_KEY}
      TIPTAP_JWT_SIGNING_KEY: ${TIPTAP_JWT_SIGNING_KEY}
      PLATFORM: ${PLATFORM}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    depends_on:
      migrator:
        condition: service_completed_successfully  # only start if OK
    networks:
      - backend_network

  nextjs-app:
    image: ${FRONTEND_IMAGE_NAME}
    build:
      # Set a path to build from source locally, or
      # set to empty string or not set and set a container registry
      # URI in BACKEND_IMAGE_NAME to pull a prebuilt image
      context: ${FRONTEND_BUILD_CONTEXT}
    container_name: ${FRONTEND_CONTAINER_NAME}
    environment:
      NEXT_PUBLIC_BACKEND_SERVICE_PROTOCOL: ${BACKEND_SERVICE_PROTOCOL}
      NEXT_PUBLIC_BACKEND_SERVICE_PORT: ${BACKEND_PORT}
      NEXT_PUBLIC_BACKEND_SERVICE_HOST: ${BACKEND_SERVICE_HOST}
      NEXT_PUBLIC_BACKEND_API_VERSION: ${BACKEND_API_VERSION}
      FRONTEND_SERVICE_PORT: ${FRONTEND_SERVICE_PORT}
      FRONTEND_IMAGE_NAME: ${FRONTEND_IMAGE_NAME}
      FRONTEND_CONTAINER_NAME: ${FRONTEND_CONTAINER_NAME}
    ports:
      - "${FRONTEND_SERVICE_PORT}:${FRONTEND_SERVICE_PORT}"  # expose FE
    depends_on:
      - rust-app
    networks:
      - backend_network

volumes:
  postgres_data:                            # named volume for PG data

networks:
  backend_network:                          # shared bridge network
    driver: bridge

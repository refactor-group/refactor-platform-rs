//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use super::roles::Role;
use crate::Id;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "refactor_platform", table_name = "user_roles")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: Id,
    pub role: Role,
    pub organization_id: Option<Uuid>,
    pub user_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Organizations,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        match self.role.as_ref() {
            &Role::SuperAdmin if self.organization_id.as_ref().is_some() => {
                Err(DbErr::Custom(format!(
                    "[before_save] SuperAdmins should not be associated with an organization, insert: {}",
                    insert
                )))
            }
            &Role::Admin | &Role::User if self.organization_id.as_ref().is_none() => {
                Err(DbErr::Custom(format!(
                    "[before_save] Admins or Users should be associated with an organization, insert: {}",
                    insert
                )))
            }
            _ => Ok(self)
        }
    }
}

//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use super::roles::Role;
use crate::{EntityValidationError, Id};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(schema_name = "refactor_platform", table_name = "user_roles")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: Id,
    pub role: Role,
    pub organization_id: Option<Uuid>,
    pub user_id: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::organizations::Entity",
        from = "Column::OrganizationId",
        to = "super::organizations::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Organizations,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Organizations.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Model {
    /// Validates that role-organization relationships are correct:
    /// - SuperAdmin roles must have NULL organization_id (global scope)
    /// - User and Admin roles must have non-NULL organization_id (org scope)
    pub fn validate(&self) -> Result<(), EntityValidationError> {
        match self.role {
            Role::SuperAdmin if self.organization_id.is_some() => Err(EntityValidationError::new(
                "SuperAdmin role cannot be scoped to an organization",
            )),
            Role::User | Role::Admin if self.organization_id.is_none() => {
                Err(EntityValidationError::new(
                    "User and Admin roles must be scoped to an organization",
                ))
            }
            _ => Ok(()),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[cfg(test)]
mod tests {
    use super::*;
    use chrono::Utc;
    use uuid::Uuid;

    #[test]
    fn test_super_admin_with_no_organization_is_valid() {
        let now = Utc::now();
        let model = Model {
            id: Uuid::new_v4(),
            role: Role::SuperAdmin,
            organization_id: None,
            user_id: Uuid::new_v4(),
            created_at: now.into(),
            updated_at: now.into(),
        };

        assert!(
            model.validate().is_ok(),
            "SuperAdmin without organization should be valid"
        );
    }

    #[test]
    fn test_super_admin_with_organization_is_invalid() {
        let now = Utc::now();
        let model = Model {
            id: Uuid::new_v4(),
            role: Role::SuperAdmin,
            organization_id: Some(Uuid::new_v4()),
            user_id: Uuid::new_v4(),
            created_at: now.into(),
            updated_at: now.into(),
        };

        let result = model.validate();
        assert!(
            result.is_err(),
            "SuperAdmin with organization should be invalid"
        );
        assert_eq!(
            result.unwrap_err().message,
            "SuperAdmin role cannot be scoped to an organization"
        );
    }

    #[test]
    fn test_user_role_with_organization_is_valid() {
        let now = Utc::now();
        let model = Model {
            id: Uuid::new_v4(),
            role: Role::User,
            organization_id: Some(Uuid::new_v4()),
            user_id: Uuid::new_v4(),
            created_at: now.into(),
            updated_at: now.into(),
        };

        assert!(
            model.validate().is_ok(),
            "User role with organization should be valid"
        );
    }

    #[test]
    fn test_user_role_without_organization_is_invalid() {
        let now = Utc::now();
        let model = Model {
            id: Uuid::new_v4(),
            role: Role::User,
            organization_id: None,
            user_id: Uuid::new_v4(),
            created_at: now.into(),
            updated_at: now.into(),
        };

        let result = model.validate();
        assert!(
            result.is_err(),
            "User role without organization should be invalid"
        );
        assert_eq!(
            result.unwrap_err().message,
            "User and Admin roles must be scoped to an organization"
        );
    }

    #[test]
    fn test_admin_role_with_organization_is_valid() {
        let now = Utc::now();
        let model = Model {
            id: Uuid::new_v4(),
            role: Role::Admin,
            organization_id: Some(Uuid::new_v4()),
            user_id: Uuid::new_v4(),
            created_at: now.into(),
            updated_at: now.into(),
        };

        assert!(
            model.validate().is_ok(),
            "Admin role with organization should be valid"
        );
    }

    #[test]
    fn test_admin_role_without_organization_is_invalid() {
        let now = Utc::now();
        let model = Model {
            id: Uuid::new_v4(),
            role: Role::Admin,
            organization_id: None,
            user_id: Uuid::new_v4(),
            created_at: now.into(),
            updated_at: now.into(),
        };

        let result = model.validate();
        assert!(
            result.is_err(),
            "Admin role without organization should be invalid"
        );
        assert_eq!(
            result.unwrap_err().message,
            "User and Admin roles must be scoped to an organization"
        );
    }
}

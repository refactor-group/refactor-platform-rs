name: Build and Push Non-Production Images

permissions:
  actions: read
  contents: read
  packages: none
  id-token: none
  security-events: none
  pull-requests: none
  issues: none
  statuses: none

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  BASE_REPO: ${{ github.repository }}
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 3
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  RUST_BACKTRACE: 1

jobs:
  setup-cache-strategy:
    name: Setup Cache Strategy
    runs-on: ubuntu-24.04
    outputs:
      rust_cache_key: ${{ steps.cache_keys.outputs.rust_cache_key }}
      rust_restore_keys: ${{ steps.cache_keys.outputs.rust_restore_keys }}
      docker_cache_key: ${{ steps.cache_keys.outputs.docker_cache_key }}
      docker_restore_keys: ${{ steps.cache_keys.outputs.docker_restore_keys }}
      branch_name: ${{ steps.branch_info.outputs.branch_name }}
      image_name: ${{ steps.branch_info.outputs.image_name }}
      cache_scope: ${{ steps.cache_keys.outputs.cache_scope }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout repository
        with:
          fetch-depth: 1

      - id: branch_info
        name: Extract branch information
        run: |
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          SAFE=${BRANCH//\//-}
          IMAGE="${{ env.REGISTRY }}/${{ env.BASE_REPO }}-${SAFE}"
          echo "branch_name=$SAFE" >> $GITHUB_OUTPUT
          echo "image_name=$IMAGE" >> $GITHUB_OUTPUT
      - id: cache_keys
        name: Generate optimized cache keys
        run: |
          CARGO_HASH="${{ hashFiles('**/Cargo.lock','**/Cargo.toml') }}"
          DOCKER_HASH="${{ hashFiles('Dockerfile','.dockerignore') }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            SCOPE="pr-${{ github.event.number }}"
          else
            SCOPE="branch-${{ steps.branch_info.outputs.branch_name }}"
          fi
          echo "rust_cache_key=rust-v4-${SCOPE}-${CARGO_HASH}" >> $GITHUB_OUTPUT
          echo "rust_restore_keys<<EOF"                     >> $GITHUB_OUTPUT
          echo "rust-v4-${SCOPE}-"                           >> $GITHUB_OUTPUT
          echo "rust-v4-branch-main-"                        >> $GITHUB_OUTPUT
          echo "rust-v4-"                                    >> $GITHUB_OUTPUT
          echo "EOF"                                         >> $GITHUB_OUTPUT
          echo "docker_cache_key=docker-v4-${SCOPE}-${DOCKER_HASH}" >> $GITHUB_OUTPUT
          echo "docker_restore_keys<<EOF"                            >> $GITHUB_OUTPUT
          echo "docker-v4-${SCOPE}-"                                 >> $GITHUB_OUTPUT
          echo "docker-v4-branch-main-"                              >> $GITHUB_OUTPUT
          echo "docker-v4-"                                          >> $GITHUB_OUTPUT
          echo "EOF"                                                >> $GITHUB_OUTPUT
          echo "cache_scope=$SCOPE" >> $GITHUB_OUTPUT
  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-24.04
    needs: setup-cache-strategy
    steps:
      - uses: actions/checkout@v4
        name: Checkout repository
        with:
          fetch-depth: 1

      - uses: dtolnay/rust-toolchain@stable
        name: Install Rust toolchain (with rustfmt)
        with:
          components: rustfmt

      - name: Install sccache
        uses: taiki-e/install-action@v2
        with:
          tool: sccache

      - uses: actions/cache@v4
        name: Cache sccache
        with:
          path: ~/.cache/sccache
          key: sccache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: sccache-${{ runner.os }}-

      - uses: actions/cache@v4
        name: Cache Rust dependencies
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ needs.setup-cache-strategy.outputs.rust_cache_key }}
          restore-keys: ${{ needs.setup-cache-strategy.outputs.rust_restore_keys }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 3

      - uses: taiki-e/install-action@v2
        name: Install seaORM CLI
        with:
          tool: sea-orm-cli

      - name: Run tests (optimized, via sccache)
        env:
          RUSTC_WRAPPER: sccache
          RUSTFLAGS: "-C debuginfo=0 -C opt-level=2 -C codegen-units=1"
        run: |
          rm -rf target/debug/incremental 2>/dev/null || true
          cargo test --release --all-targets --jobs $(nproc)
      - name: Check formatting
        run: cargo fmt --check

      - name: Optimize cache size
        run: |
          find target -name "*.pdb"   -delete 2>/dev/null || true
          find target -name "*.dSYM"  -type d -exec rm -rf {} + 2>/dev/null || true
          find target -name "*.rmeta" -mtime +1 -delete 2>/dev/null || true
          find target -name "*.rlib"  -mtime +3 -delete 2>/dev/null || true
  rust-lint:
    name: Rust Lint
    runs-on: ubuntu-24.04
    needs: setup-cache-strategy
    steps:
      - uses: actions/checkout@v4
        name: Checkout repository
        with:
          fetch-depth: 1

      - uses: dtolnay/rust-toolchain@stable
        name: Install Rust toolchain (with Clippy)
        with:
          components: clippy

      - name: Install sccache
        uses: taiki-e/install-action@v2
        with:
          tool: sccache

      - uses: actions/cache@v4
        name: Cache sccache
        with:
          path: ~/.cache/sccache
          key: lint-sccache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: lint-sccache-${{ runner.os }}-

      - uses: actions/cache@v4
        name: Cache Rust dependencies (shared)
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: lint-${{ needs.setup-cache-strategy.outputs.rust_cache_key }}
          restore-keys: |
            lint-${{ needs.setup-cache-strategy.outputs.rust_restore_keys }}
            ${{ needs.setup-cache-strategy.outputs.rust_restore_keys }}
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 3

      - name: Lint with Clippy (optimized, via sccache)
        env:
          RUSTC_WRAPPER: sccache
          RUSTFLAGS: "-C debuginfo=0 -C codegen-units=1"
        run: |
          rm -rf target/debug/incremental 2>/dev/null || true
          cargo clippy --all-targets --all-features --jobs $(nproc) -- -D warnings
  container-build:
    name: Build & Push Container
    runs-on: ubuntu-24.04
    needs: [setup-cache-strategy, rust-tests, rust-lint]
    if: ${{ success() }}
    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      matrix:
        include:
          - arch: x86_64
            platform: linux/amd64
            base_image: ghcr.io/rust-cross/rust-musl-cross:x86_64-musl
            target: x86_64-unknown-linux-musl
            rustflags: "-C target-cpu=generic -C opt-level=3 -C codegen-units=1"
          - arch: aarch64
            platform: linux/arm64
            base_image: ghcr.io/rust-cross/rust-musl-cross:aarch64-musl
            target: aarch64-unknown-linux-musl
            rustflags: "-C target-cpu=generic -C opt-level=2 -C codegen-units=4 -C link-arg=-Wl,--no-keep-memory"

    outputs:
      image_name: ${{ needs.setup-cache-strategy.outputs.image_name }}

    steps:
      - uses: actions/checkout@v4
        name: Checkout repository
        with:
          fetch-depth: 1

      - id: buildx
        uses: docker/setup-buildx-action@v3
        name: Set up Docker Buildx
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5
            network=host
          buildkitd-flags: >
            --allow-insecure-entitlement security.insecure
            --allow-insecure-entitlement network.host
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 1
            [worker.containerd]
              max-parallelism = 1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - uses: docker/login-action@v3
        name: Login to GitHub Container Registry
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: meta
        uses: docker/metadata-action@v5
        name: Generate arch-specific Docker metadata
        with:
          images: ${{ needs.setup-cache-strategy.outputs.image_name }}
          tags: |
            type=raw,value=stable-${{ matrix.arch }}

      - id: build
        uses: docker/build-push-action@v5
        name: Build and push (cargo-chef optimized)
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            TARGET_TRIPLE=${{ matrix.target }}
            BUILDKIT_INLINE_CACHE=1
            CARGO_INCREMENTAL=0
            RUSTFLAGS=${{ matrix.rustflags }}
          cache-from: |
            type=gha,scope=${{ needs.setup-cache-strategy.outputs.cache_scope }}-${{ matrix.arch }}
            type=gha,scope=main-${{ matrix.arch }}
          cache-to: |
            type=gha,mode=min,scope=${{ needs.setup-cache-strategy.outputs.cache_scope }}-${{ matrix.arch }}
          outputs: type=image,compression=zstd,compression-level=3,force-compression=true
          provenance: false
          sbom: true
        env:
          BUILDKIT_PROGRESS: plain
          DOCKER_BUILDKIT: 1

  create-manifest:
    name: Create multi-arch manifest
    runs-on: ubuntu-24.04
    needs: [setup-cache-strategy, container-build]
    if: ${{ success() }}
    permissions:
      contents: read
      packages: write
    steps:
      - uses: docker/login-action@v3
        name: Login to GHCR for manifest step
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: buildx
        uses: docker/setup-buildx-action@v3
        name: Set up Buildx for manifest
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5
            network=host
      - name: Create & push multi-arch stable tag
        run: |
          docker buildx imagetools create \
            --tag ${{ needs.setup-cache-strategy.outputs.image_name }}:stable \
            ${{ needs.setup-cache-strategy.outputs.image_name }}:stable-x86_64 \
            ${{ needs.setup-cache-strategy.outputs.image_name }}:stable-aarch64
  security-scan:
    name: Security Scan
    runs-on: ubuntu-24.04
    needs: [setup-cache-strategy, container-build, create-manifest]
    if: ${{ success() }}
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - uses: actions/checkout@v4
        name: Checkout repository
        with:
          fetch-depth: 1

      - uses: docker/login-action@v3
        name: Login to GHCR
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v4
        name: Cache Trivy DB
        with:
          path: ~/.cache/trivy
          key: trivy-db-v1
          restore-keys: |
            trivy-db-v1-
        env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2

      - uses: aquasecurity/trivy-action@0.17.0
        name: Run Trivy
        with:
          image-ref: ${{ needs.setup-cache-strategy.outputs.image_name }}:stable
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          timeout: 5m
          cache-dir: ~/.cache/trivy
          scanners: vuln

      - uses: github/codeql-action/upload-sarif@v3
        if: always()
        name: Upload Trivy SARIF
        with:
          sarif_file: trivy-results.sarif
          category: trivy

  cache-maintenance:
    name: Cache Maintenance
    runs-on: ubuntu-24.04
    needs: [setup-cache-strategy, container-build, create-manifest]
    if: always()
    steps:
      - name: Cache health report
        run: |
          echo "🔍 Cache Scope: ${{ needs.setup-cache-strategy.outputs.cache_scope }}"
          echo "✅ Build & Manifest: ${{ needs.create-manifest.result }}"
          echo "🕒 $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-24.04
    needs: [setup-cache-strategy, container-build, create-manifest]
    if: always()
    steps:
      - name: Generate summary
        run: |
          mkdir -p ./artifacts
          {
            echo "# 🚀 Deployment Summary"
            echo "| Metric      | Value                                                    |"
            echo "|---          |---                                                       |"
            echo "| **Branch**  | ${{ needs.setup-cache-strategy.outputs.branch_name }}    |"
            echo "| **Image**   | ${{ needs.setup-cache-strategy.outputs.image_name }}:stable |"
            echo "| **Platforms** | linux/amd64, linux/arm64                                |"
            echo "| **Cache**   | inline & multi-tier                                      |"
            echo "| **Build**   | ${{ needs.container-build.result }}                     |"
            echo "| **Manifest**| ${{ needs.create-manifest.result }}                     |"
            echo "| **Commit**  | ${{ github.sha }}                                         |"
            echo "| **Time**    | $(date -u '+%Y-%m-%d %H:%M:%S UTC')                      |"
          } > ./artifacts/deployment-summary.md
      - uses: actions/upload-artifact@v4
        name: Upload summary
        with:
          name: deployment-summary-${{ needs.setup-cache-strategy.outputs.cache_scope }}
          path: ./artifacts/deployment-summary.md
          retention-days: 30

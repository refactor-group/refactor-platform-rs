name: Deploy PR Preview to RPi5

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

  # Manual trigger for testing specific branches
  workflow_dispatch:
    inputs:
      backend_branch:
        description: "Backend branch to deploy"
        required: true
        default: "main"
        type: string
      pr_number:
        description: "PR number for naming (auto-detected for PR triggers)"
        required: false
        type: string
      force_rebuild:
        description: "Force rebuild without cache"
        required: false
        default: false
        type: boolean

# Prevent concurrent deployments for the same PR
concurrency:
  group: preview-deploy-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

permissions:
  contents: read # Read repository contents for checkout
  packages: write # Write to GHCR for pushing container images
  pull-requests: write # Comment on PRs with deployment info

# Registry configuration
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-preview:
    name: Deploy PR Preview Environment
    runs-on: ubuntu-24.04
    environment: pr-preview # All secrets/vars configured with UNUSED for optional values

    steps:
      # Calculate deployment context and dynamic port assignments
      - name: Set Deployment Context
        id: context
        run: |
          # Determine trigger source and set appropriate variables
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Real PR deployment - use PR number and head branch
            PR_NUM="${{ github.event.pull_request.number }}"
            BACKEND_BRANCH="${{ github.head_ref }}"
            TRIGGER_TYPE="pull_request"
          else
            # Manual deployment - use provided or generated PR number
            PR_NUM="${{ inputs.pr_number }}"
            if [[ -z "$PR_NUM" ]]; then
              # Generate unique pseudo-PR number for manual runs (9000+ range avoids conflicts)
              PR_NUM=$((9000 + ${{ github.run_number }}))
            fi
            BACKEND_BRANCH="${{ inputs.backend_branch }}"
            TRIGGER_TYPE="workflow_dispatch"
          fi

          # Store context for later steps
          echo "pr_number=${PR_NUM}" >> $GITHUB_OUTPUT
          echo "backend_branch=${BACKEND_BRANCH}" >> $GITHUB_OUTPUT
          echo "trigger_type=${TRIGGER_TYPE}" >> $GITHUB_OUTPUT

          # Calculate dynamic ports - container uses base port, external uses base + PR number
          BACKEND_CONTAINER_PORT=${{ vars.BACKEND_PORT_BASE }}
          BACKEND_EXTERNAL_PORT=$((${{ vars.BACKEND_PORT_BASE }} + PR_NUM))
          POSTGRES_EXTERNAL_PORT=$((${{ vars.POSTGRES_PORT_BASE }} + PR_NUM))

          echo "backend_container_port=${BACKEND_CONTAINER_PORT}" >> $GITHUB_OUTPUT
          echo "backend_port=${BACKEND_EXTERNAL_PORT}" >> $GITHUB_OUTPUT
          echo "postgres_port=${POSTGRES_EXTERNAL_PORT}" >> $GITHUB_OUTPUT

          # Docker Compose project name for namespace isolation between PRs
          echo "project_name=pr-${PR_NUM}" >> $GITHUB_OUTPUT

          # Create image tags for traceability
          IMAGE_BASE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          IMAGE_TAG_PR="${IMAGE_BASE}:pr-${PR_NUM}"
          IMAGE_TAG_SHA="${IMAGE_BASE}:pr-${PR_NUM}-${{ github.sha }}"
          echo "image_tag_pr=${IMAGE_TAG_PR}" >> $GITHUB_OUTPUT
          echo "image_tag_sha=${IMAGE_TAG_SHA}" >> $GITHUB_OUTPUT

          # Log deployment configuration for debugging
          echo "::notice::üöÄ Deploying PR #${PR_NUM} from branch '${BACKEND_BRANCH}'"
          echo "::notice::üì¶ Image tags: ${IMAGE_TAG_PR}, ${IMAGE_TAG_SHA}"
          echo "::notice::üîå Ports - Postgres: ${POSTGRES_EXTERNAL_PORT}, Backend: ${BACKEND_EXTERNAL_PORT}:${BACKEND_CONTAINER_PORT}"

      # Get the source code for the specified branch
      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.context.outputs.backend_branch }}

      # Connect to Tailscale VPN for secure access to RPi5
      - name: Setup Tailscale
        uses: tailscale/github-action@v3
        with:
          # Use PR preview specific Tailscale credentials
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID_PR_PREVIEW }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET_PR_PREVIEW }}
          tags: tag:github-actions # Tag for identification in Tailscale admin
          version: latest
          use-cache: true # Cache Tailscale binary for faster subsequent runs

      # Authenticate with GitHub Container Registry for image operations
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # Current GitHub user
          password: ${{ secrets.GITHUB_TOKEN }} # Automatic GitHub token

      # Setup Docker Buildx for advanced build features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build ARM64 container image for RPi5 and push to registry
      - name: Build and Push PR-Specific Backend Image
        uses: docker/build-push-action@v5
        with:
          context: . # Build from repository root
          file: ./Dockerfile # Use standard Dockerfile
          platforms: linux/arm64 # Target RPi5 ARM64 architecture
          push: true # Push to registry after build
          # Tag with both PR number and commit SHA for traceability
          tags: |
            ${{ steps.context.outputs.image_tag_pr }}
            ${{ steps.context.outputs.image_tag_sha }}
          # Conditional caching - skip if force rebuild requested
          cache-from: ${{ inputs.force_rebuild != true && 'type=gha' || '' }}
          cache-to: ${{ inputs.force_rebuild != true && 'type=gha,mode=max' || '' }}
          # Add metadata labels for container image
          labels: |
            org.opencontainers.image.title=Refactor Platform Backend PR-${{ steps.context.outputs.pr_number }}
            org.opencontainers.image.description=PR preview for branch ${{ steps.context.outputs.backend_branch }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            pr.number=${{ steps.context.outputs.pr_number }}
            pr.branch=${{ steps.context.outputs.backend_branch }}

      # Deploy the application to RPi5 over secure Tailscale connection
      - name: Deploy to RPi5 via Tailscale
        env:
          # Pass deployment context as environment variables
          PR_NUMBER: ${{ steps.context.outputs.pr_number }}
          BACKEND_IMAGE: ${{ steps.context.outputs.image_tag_pr }}
          PR_POSTGRES_PORT: ${{ steps.context.outputs.postgres_port }}
          PR_BACKEND_PORT: ${{ steps.context.outputs.backend_port }}
          PR_BACKEND_CONTAINER_PORT: ${{ steps.context.outputs.backend_container_port }}
          PROJECT_NAME: ${{ steps.context.outputs.project_name }}
          # All environment variables from pr-preview environment (includes UNUSED for optional)
          POSTGRES_USER: ${{ secrets.PR_PREVIEW_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PR_PREVIEW_POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PR_PREVIEW_POSTGRES_DB }}
          POSTGRES_SCHEMA: ${{ secrets.PR_PREVIEW_POSTGRES_SCHEMA }}
          RUST_ENV: ${{ vars.RUST_ENV }}
          BACKEND_INTERFACE: ${{ vars.BACKEND_INTERFACE }}
          BACKEND_ALLOWED_ORIGINS: ${{ vars.BACKEND_ALLOWED_ORIGINS }}
          BACKEND_LOG_FILTER_LEVEL: ${{ vars.BACKEND_LOG_FILTER_LEVEL }}
          BACKEND_SESSION_EXPIRY_SECONDS: ${{ vars.BACKEND_SESSION_EXPIRY_SECONDS }}
          SERVICE_STARTUP_WAIT: ${{ vars.SERVICE_STARTUP_WAIT_SECONDS }}
          # Optional third-party services (set to UNUSED in pr-preview environment if not needed)
          TIPTAP_APP_ID: ${{ secrets.PR_PREVIEW_TIPTAP_APP_ID }}
          TIPTAP_URL: ${{ secrets.PR_PREVIEW_TIPTAP_URL }}
          TIPTAP_AUTH_KEY: ${{ secrets.PR_PREVIEW_TIPTAP_AUTH_KEY }}
          TIPTAP_JWT_SIGNING_KEY: ${{ secrets.PR_PREVIEW_TIPTAP_JWT_SIGNING_KEY }}
          MAILERSEND_API_KEY: ${{ secrets.PR_PREVIEW_MAILERSEND_API_KEY }}
          WELCOME_EMAIL_TEMPLATE_ID: ${{ secrets.PR_PREVIEW_WELCOME_EMAIL_TEMPLATE_ID }}
        run: |
          # Configure SSH for secure connection to RPi5
          mkdir -p ~/.ssh
          echo "${{ secrets.RPI5_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519  # Secure private key permissions
          echo "${{ secrets.RPI5_HOST_KEY }}" >> ~/.ssh/known_hosts  # Trust RPi5 host

          # Verify SSH connectivity before proceeding with deployment
          echo "üîç Testing SSH connection..."
          ssh -o BatchMode=yes -o ConnectTimeout=10 \
            -i ~/.ssh/id_ed25519 \
            ${{ secrets.RPI5_USERNAME }}@${{ secrets.RPI5_TAILSCALE_NAME }} \
            'echo "‚úÖ SSH connection successful"'

          # Transfer Docker Compose configuration to RPi5
          echo "üì¶ Transferring deployment files..."
          scp -o ConnectTimeout=10 \
            -i ~/.ssh/id_ed25519 \
            docker-compose.pr-preview.yaml \
            ${{ secrets.RPI5_USERNAME }}@${{ secrets.RPI5_TAILSCALE_NAME }}:/home/${{ secrets.RPI5_USERNAME }}/pr-${PR_NUMBER}-compose.yaml

          # Execute deployment commands on RPi5 with proper error handling
          echo "üöÄ Deploying PR preview environment..."
          ssh -o BatchMode=yes -o ConnectTimeout=30 \
            -i ~/.ssh/id_ed25519 \
            ${{ secrets.RPI5_USERNAME }}@${{ secrets.RPI5_TAILSCALE_NAME }} \
            "set -e && \
             export PR_NUMBER='${PR_NUMBER}' && \
             export BACKEND_IMAGE='${BACKEND_IMAGE}' && \
             export PR_POSTGRES_PORT='${PR_POSTGRES_PORT}' && \
             export PR_BACKEND_PORT='${PR_BACKEND_PORT}' && \
             export PR_BACKEND_CONTAINER_PORT='${PR_BACKEND_CONTAINER_PORT}' && \
             export POSTGRES_USER='${POSTGRES_USER}' && \
             export POSTGRES_PASSWORD='${POSTGRES_PASSWORD}' && \
             export POSTGRES_DB='${POSTGRES_DB}' && \
             export POSTGRES_SCHEMA='${POSTGRES_SCHEMA}' && \
             export RUST_ENV='${RUST_ENV}' && \
             export BACKEND_INTERFACE='${BACKEND_INTERFACE}' && \
             export BACKEND_ALLOWED_ORIGINS='${BACKEND_ALLOWED_ORIGINS}' && \
             export BACKEND_LOG_FILTER_LEVEL='${BACKEND_LOG_FILTER_LEVEL}' && \
             export BACKEND_SESSION_EXPIRY_SECONDS='${BACKEND_SESSION_EXPIRY_SECONDS}' && \
             export TIPTAP_APP_ID='${TIPTAP_APP_ID}' && \
             export TIPTAP_URL='${TIPTAP_URL}' && \
             export TIPTAP_AUTH_KEY='${TIPTAP_AUTH_KEY}' && \
             export TIPTAP_JWT_SIGNING_KEY='${TIPTAP_JWT_SIGNING_KEY}' && \
             export MAILERSEND_API_KEY='${MAILERSEND_API_KEY}' && \
             export WELCOME_EMAIL_TEMPLATE_ID='${WELCOME_EMAIL_TEMPLATE_ID}' && \
             cd /home/${{ secrets.RPI5_USERNAME }} && \
             echo 'üì¶ Logging into GHCR...' && \
             echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u ${{ github.actor }} --password-stdin && \
             echo 'üì• Pulling image: \${BACKEND_IMAGE}...' && \
             docker pull \${BACKEND_IMAGE} && \
             echo 'üõë Stopping existing PR-\${PR_NUMBER} environment...' && \
             docker compose -p \${PR_NUMBER} -f pr-\${PR_NUMBER}-compose.yaml down 2>/dev/null || true && \
             echo 'üöÄ Starting PR preview environment with project namespace...' && \
             docker compose -p \${PR_NUMBER} -f pr-\${PR_NUMBER}-compose.yaml up -d && \
             echo '‚è≥ Waiting ${SERVICE_STARTUP_WAIT} seconds for services...' && \
             sleep ${SERVICE_STARTUP_WAIT} && \
             echo 'ü©∫ Deployment status:' && \
             docker compose -p \${PR_NUMBER} ps && \
             echo 'üìú Migration logs:' && \
             docker logs \${PR_NUMBER}-migrator-1 2>&1 | tail -20 || echo '‚ö†Ô∏è Migrator exited' && \
             echo 'üìú Backend logs:' && \
             docker logs \${PR_NUMBER}-backend-1 2>&1 | tail -20 || echo '‚ö†Ô∏è Backend starting' && \
             echo '‚úÖ Deployment complete!'"

      # Add informative comment to PR with deployment details
      - name: Comment on PR with Preview URL
        if: github.event_name == 'pull_request' # Only comment on actual PRs, not manual runs
        uses: actions/github-script@v7
        with:
          script: |
            // Extract deployment information from previous steps
            const prNumber = ${{ steps.context.outputs.pr_number }};
            const backendPort = ${{ steps.context.outputs.backend_port }};
            const postgresPort = ${{ steps.context.outputs.postgres_port }};
            const backendBranch = '${{ steps.context.outputs.backend_branch }}';
            const imageTag = '${{ steps.context.outputs.image_tag_pr }}';
            const backendUrl = `http://${{ secrets.RPI5_TAILSCALE_NAME }}:${backendPort}`;

            // Create comprehensive deployment comment
            const comment = `## üöÄ PR Preview Environment Deployed!

            ### üîó Access URLs
            | Service | URL |
            |---------|-----|
            | **Backend API** | [${backendUrl}](${backendUrl}) |
            | **Health Check** | [${backendUrl}/health](${backendUrl}/health) |

            ### üìä Environment Details
            - **PR Number:** #${prNumber}
            - **Backend Branch:** \`${backendBranch}\`
            - **Commit:** \`${{ github.sha }}\`
            - **Image:** \`${imageTag}\`
            - **Postgres Port:** ${postgresPort}
            - **Backend Port:** ${backendPort}

            ### üîê Access Instructions
            1. **Connect to Tailscale** network (required)
            2. Access backend: ${backendUrl}
            3. Test health: ${backendUrl}/health

            ### üß™ Testing
            \`\`\`bash
            # Health check
            curl ${backendUrl}/health

            # API endpoint test (adjust as needed)
            curl ${backendUrl}/api/v1/...
            \`\`\`

            ### üßπ Cleanup
            _Environment auto-cleaned when PR closes/merges_

            ---
            *Deployed: ${new Date().toISOString()}*
            *Image: \`${imageTag}\`*`;

            // Check for existing bot comments to update instead of creating duplicates
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            // Find existing preview environment comment from this bot
            const botComment = comments.find(c => 
              c.user.type === 'Bot' && c.body.includes('PR Preview Environment')
            );

            if (botComment) {
              // Update existing comment with latest deployment info
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment,
              });
            } else {
              // Create new comment if none exists
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment,
              });
            }

      # Display deployment summary for manual runs (no PR to comment on)
      - name: Output Deployment Summary
        if: github.event_name == 'workflow_dispatch' # Only for manual trigger
        run: |
          echo "::notice::‚úÖ Manual deployment completed!"
          echo "::notice::üåê Backend: http://${{ secrets.RPI5_TAILSCALE_NAME }}:${{ steps.context.outputs.backend_port }}"
          echo "::notice::üóÑÔ∏è  Postgres: ${{ secrets.RPI5_TAILSCALE_NAME }}:${{ steps.context.outputs.postgres_port }}"
          echo "::notice::üì¶ Image: ${{ steps.context.outputs.image_tag_pr }}"

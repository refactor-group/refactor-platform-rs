name: Build and Deploy Containers

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_test_run:
    runs-on: ubuntu-22.04

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Enable QEMU for multi-arch builds (arm64 on x86)
      - name: Set up Rust + QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64  # ‚úÖ Only needed once per buildx host

      # Install ARM cross-compiler
      - name: Install cross-compilation toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      # Install Rust toolchain with both x86_64 and arm64 targets
      - name: Set up Rust targets
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu  # ‚úÖ Targets declared here

      # Cache Rust build artifacts (unique key avoids 409 Conflict errors)
      - uses: Swatinem/rust-cache@v2
        with:
          cache-key: ${{ runner.os }}-cargo-${{ github.sha }}

      # Install sea-orm-cli globally
      - name: Install sea-orm-cli
        run: cargo install sea-orm-cli

      # Configure the Rust linker for arm64 builds
      - name: Set linker for cross-compilation
        run: |
          mkdir -p ~/.cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      # Build release binaries for ARM64
      - name: Build release binaries
        run: cargo build --release --workspace --target aarch64-unknown-linux-gnu

      # Run tests for x86_64 (native)
      - name: Run tests
        run: cargo test --release

  build_and_push_docker:
    runs-on: ubuntu-22.04
    needs: build_test_run
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      # Checkout source code
      - uses: actions/checkout@v4

      # Authenticate to GitHub Container Registry
      - name: Docker login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx for multi-platform builds
      - uses: docker/setup-buildx-action@v3
        with:
          install: true

      # Show current Docker cache usage
      - name: Show Docker Build Cache (Before)
        run: |
          echo -e "\033[1;34müîç Checking buildx cache BEFORE build...\033[0m"
          docker buildx du || echo -e "\033[1;33m‚ö†Ô∏è No cache found yet.\033[0m"

      # Compute image name based on branch name and tag as `latest`
      - name: Determine Image Tags
        id: tags
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF##*/}}
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository }}/${BRANCH_NAME}"
          echo "backend_tags=$IMAGE_NAME:latest" >> $GITHUB_OUTPUT
          echo "backend_image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      # Build and push multi-arch Docker image with GHA cache
      - name: Build + Push Backend
        id: push_backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64  # ‚úÖ Declared again for buildx
          push: true
          provenance: true
          tags: ${{ steps.tags.outputs.backend_tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Show updated Docker cache state
      - name: Show Docker Build Cache (After)
        run: |
          echo -e "\033[1;34müì¶ Checking buildx cache AFTER build...\033[0m"
          docker buildx du || echo -e "\033[1;31m‚ùå Failed to get updated cache info\033[0m"

      # Generate SBOM + attestation only on main branch
      - name: Attest Backend
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ steps.tags.outputs.backend_image_name }}
          subject-digest: ${{ steps.push_backend.outputs.digest }}
          push-to-registry: true

      # Output how to pull and run the pushed image
      - name: Print Usage Instructions
        run: |
          echo -e "\033[1;32m‚úÖ Backend Image Pushed:\033[0m"
          echo "  docker pull ${{ steps.tags.outputs.backend_image_name }}:latest"
          echo ""
          echo -e "\033[1;36m‚ñ∂Ô∏è Run Backend:\033[0m"
          echo "  docker run --rm -p 8000:8000 ${{ steps.tags.outputs.backend_image_name }}:latest"

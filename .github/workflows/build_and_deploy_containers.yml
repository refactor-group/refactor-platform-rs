name: Build and Deploy Containers  # Workflow name

# When workflows are triggered
on:
  push:
    branches:
      - main  # When changes are pushed to main (including merged PRs)
  pull_request:
    types: [opened, synchronize, reopened]  # Run when PRs are opened, updated, or reopened
  workflow_dispatch:  # Allow manual triggering from any branch

# Global env vars available to all jobs
env:
  REGISTRY: ghcr.io  # GitHub Container Registry URL
  IMAGE_NAME: ${{ github.repository }}  # Uses the format org/repo-name
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GH token for authentication
  BACKEND_IMAGE_NAME: rust-backend  # Backend Image name
  FRONTEND_IMAGE_NAME: nextjs-frontend  # Frontend Image name

jobs:
  # Build and test the Rust project
  build_test_run:
    name: Build and Test
    runs-on: ubuntu-22.04  # Use Ubuntu 22.04 runner
    permissions:
      contents: read  # Permission to read repository contents
      packages: write  # Permission to write/publish packages
      attestations: write  # Permission to write security attestations
      id-token: write  # Permission for OIDC token (needed for security)

    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v4 

      # Set env vars from GitHub Secrets
      - name: Set environment variables
        run: |
          # Database connection parameters
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> $GITHUB_ENV
          echo "POSTGRES_SCHEMA=${{ secrets.POSTGRES_SCHEMA }}" >> $GITHUB_ENV
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> $GITHUB_ENV
          # Construct database URL from individual parameters
          echo "DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}" >> $GITHUB_ENV
          # Backend configuration
          echo "BACKEND_PORT=${{ secrets.BACKEND_PORT }}" >> $GITHUB_ENV
          echo "BACKEND_INTERFACE=${{ secrets.BACKEND_INTERFACE }}" >> $GITHUB_ENV
          echo "BACKEND_ALLOWED_ORIGINS=${{ secrets.BACKEND_ALLOWED_ORIGINS }}" >> $GITHUB_ENV
          echo "BACKEND_LOG_FILTER_LEVEL=${{ secrets.BACKEND_LOG_FILTER_LEVEL }}" >> $GITHUB_ENV
          # Container configuration
          echo "PLATFORM=${{ secrets.PLATFORM }}" >> $GITHUB_ENV
          echo "CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}" >> $GITHUB_ENV
          echo "FRONTEND_CONTAINER_NAME=${{ secrets.FRONTEND_CONTAINER_NAME }}" >> $GITHUB_ENV
          echo "FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}" >> $GITHUB_ENV
          # DNS aliases for services in the compose network
          echo "DB_DNS_ALIAS=${{ secrets.DB_DNS_ALIAS }}" >> $GITHUB_ENV
          echo "BACKEND_DNS_ALIAS=${{ secrets.BACKEND_DNS_ALIAS }}" >> $GITHUB_ENV
          echo "FRONTEND_DNS_ALIAS=${{ secrets.FRONTEND_DNS_ALIAS }}" >> $GITHUB_ENV
          # Tiptap integration parameters
          echo "TIPTAP_URL=${{ secrets.TIPTAP_URL }}" >> $GITHUB_ENV
          echo "TIPTAP_AUTH_KEY=${{ secrets.TIPTAP_AUTH_KEY }}" >> $GITHUB_ENV
          echo "TIPTAP_JWT_SIGNING_KEY=${{ secrets.TIPTAP_JWT_SIGNING_KEY }}" >> $GITHUB_ENV  # Fixed typo

      # Install Rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      # Use cached dependencies to speed up builds
      - name: Use cached dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: "ubuntu-22.04-x86_64-unknown-linux-gnu"  # Cache key based on OS and architecture

      # Install seaORM CLI for database migrations/management
      - name: Install seaORM CLI
        run: cargo install sea-orm-cli

      # Build all project targets
      - name: Build
        run: cargo build --all-targets

      # Run all tests to ensure code quality
      - name: Test
        run: cargo test
  
  build_and_push_docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-22.04 
    needs: build_test_run  # Only run this job if the first job succeeds
    
    # Adds permissions for the job
    # This is needed for the attestations to work
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      # Checkout the code
      - name: Checkout
        uses: actions/checkout@v4

      # Set env vars for this job
      - name: Set environment variables
        run: |
          # Copy the same environment variables from the first job
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> $GITHUB_ENV
          echo "POSTGRES_SCHEMA=${{ secrets.POSTGRES_SCHEMA }}" >> $GITHUB_ENV
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> $GITHUB_ENV
          echo "DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}" >> $GITHUB_ENV
          echo "BACKEND_PORT=${{ secrets.BACKEND_PORT }}" >> $GITHUB_ENV
          echo "BACKEND_INTERFACE=${{ secrets.BACKEND_INTERFACE }}" >> $GITHUB_ENV
          echo "PLATFORM=${{ secrets.PLATFORM }}" >> $GITHUB_ENV
          echo "CONTAINER_NAME=${{ secrets.CONTAINER_NAME }}" >> $GITHUB_ENV
          echo "FRONTEND_CONTAINER_NAME=${{ secrets.FRONTEND_CONTAINER_NAME }}" >> $GITHUB_ENV
          echo "FRONTEND_PORT=${{ secrets.FRONTEND_PORT }}" >> $GITHUB_ENV
          echo "DB_DNS_ALIAS=${{ secrets.DB_DNS_ALIAS }}" >> $GITHUB_ENV
          echo "BACKEND_DNS_ALIAS=${{ secrets.BACKEND_DNS_ALIAS }}" >> $GITHUB_ENV
          echo "FRONTEND_DNS_ALIAS=${{ secrets.FRONTEND_DNS_ALIAS }}" >> $GITHUB_ENV
          echo "BACKEND_ALLOWED_ORIGINS=${{ secrets.BACKEND_ALLOWED_ORIGINS }}" >> $GITHUB_ENV
          echo "BACKEND_LOG_FILTER_LEVEL=${{ secrets.BACKEND_LOG_FILTER_LEVEL }}" >> $GITHUB_ENV
          echo "TIPTAP_URL=${{ secrets.TIPTAP_URL }}" >> $GITHUB_ENV
          echo "TIPTAP_AUTH_KEY=${{ secrets.TIPTAP_AUTH_KEY }}" >> $GITHUB_ENV
          echo "TIPTAP_JWT_SIGNING_KEY=${{ secrets.TIPTAP_JWT_SIGNING_KEY }}" >> $GITHUB_ENV

      # Log in to GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Cache Docker layers to speed up subsequent builds
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache  # Cache location
          key: ${{ runner.os }}-buildx-${{ github.sha }}  # Cache key based on OS and commit
          restore-keys: |
            ${{ runner.os }}-buildx-  # Fallback cache key

      # Extract metadata for Docker images (tags, labels)
      - name: Extract metadata (tags, labels) for Docker
        id: meta  # ID to reference outputs in later steps
        uses: docker/metadata-action@v4
        with:
          # Define the images to extract metadata for
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}-${{ github.actor }}:${{ github.sha }}, ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}-${{ github.actor }}:${{ github.sha }}

      # Build and push the Rust backend image
      - name: Build and Push Rust Backend Image
        id: push_backend  # ID to reference outputs in later steps
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64  # Build for multiple architectures
          context: .  # Build context is root directory
          push: true  # Push to registry after building
          tags: |  # Image tags (latest and commit SHA)
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_IMAGE_NAME }}-${{ github.actor }}:latest
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_IMAGE_NAME }}-${{ github.actor }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}  # Apply extracted labels
          cache-from: type=local,src=/tmp/.buildx-cache  # Use cached layers
          cache-to: type=local,dest=/tmp/.buildx-cache-new  # Cache new layers
          file: Dockerfile  # Use root Dockerfile

      # Build and push the Next.js frontend image
      - name: Build and Push Next.js Frontend Image
        id: push_frontend  # ID to reference outputs in later steps
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64  # Build for multiple architectures
          context: web  # Build context is web directory
          push: true  # Push to registry after building
          tags: |  # Image tags (latest and commit SHA)
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.FRONTEND_IMAGE_NAME }}-${{ github.actor }}:latest
            ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.FRONTEND_IMAGE_NAME }}-${{ github.actor }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}  # Apply extracted labels
          cache-from: type=local,src=/tmp/.buildx-cache  # Use cached layers
          cache-to: type=local,dest=/tmp/.buildx-cache-new  # Cache new layers
          file: web/Dockerfile  # Use web Dockerfile

      # Move new cache to the original location for future jobs
      - name: Move new cache
        run: mv /tmp/.buildx-cache-new /tmp/.buildx-cache  # Update cache

      # Generate artifact attestation for security and supply chain integrity
      - name: Generate artifact attestation for Rust Backend Image
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.BACKEND_IMAGE_NAME }}-${{ github.actor }}
          subject-digest: ${{ steps.push_backend.outputs.digest }}  # Use the digest output from build
          push-to-registry: true  # Push attestation to registry

      # Generate artifact attestation for security and supply chain integrity
      - name: Generate artifact attestation for Next.js Frontend Image
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.FRONTEND_IMAGE_NAME }}-${{ github.actor }}
          subject-digest: ${{ steps.push_frontend.outputs.digest }}  # Use the digest output from build
          push-to-registry: true  # Push attestation to registry
name: Warm Main Branch Cache

# Builds and caches ARM64 dependencies from main branch to speed up PR preview builds
# This workflow runs nightly and after pushes to main to keep cache fresh
on:
  # Run daily at 2 AM UTC to maintain fresh cache
  schedule:
    - cron: '0 2 * * *'

  # Run whenever dependencies or code change on main branch
  push:
    branches:
      - main
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'src/**'
      - 'migration/**'
      - 'Dockerfile'

  # Allow manual trigger for immediate cache refresh
  workflow_dispatch:

# Prevent concurrent cache builds to avoid conflicts
concurrency:
  group: warm-main-cache
  cancel-in-progress: true

# Minimal permissions needed for building and pushing to registry
permissions:
  contents: read # Read repository contents for checkout
  packages: write # Write to GHCR for pushing cache images

# Registry configuration matching PR preview workflow
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  warm-cache:
    name: Build and Cache Main Branch Dependencies
    runs-on: ubuntu-24.04

    steps:
      # Checkout main branch code
      - name: Checkout Main Branch
        uses: actions/checkout@v4
        with:
          ref: main

      # Set up Docker Buildx for advanced build features and caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate with GitHub Container Registry to push cache images
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # Current GitHub user
          password: ${{ secrets.GITHUB_TOKEN }} # Automatic GitHub token

      # Build ARM64 image to match PR preview target architecture
      # This pre-compiles all dependencies so PR builds can reuse them
      - name: Build and Cache Main Branch Image
        uses: docker/build-push-action@v5
        with:
          context: . # Build from repository root
          file: ./Dockerfile # Use standard Dockerfile
          platforms: linux/arm64 # Target RPi5 ARM64 architecture
          push: true # Push image to registry for reference
          # Tag images for traceability and debugging
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-cache
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
          # Pull from existing main cache to reuse previous night's work
          cache-from: type=gha,scope=main
          # Write cache back to main scope for PR builds and next nightly run
          cache-to: type=gha,mode=max,scope=main
          # Add metadata labels for container image identification
          labels: |
            org.opencontainers.image.title=Refactor Platform Backend Main Cache
            org.opencontainers.image.description=Pre-built cache image for faster PR preview builds
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
